/*
 * SevenSeg.c
 *
 *  Created on: Oct 30, 2020
 *      Author: scottvandentoorn
 */

#include "SevenSeg.h"


/**
 * Write an integer to a given range of digits
 * @param low_digit Low digit (inclusive)
 * @param high_digit High digit (inclusive)
 * @param data Integer to be written to LCD
 */
void SevenSeg_WriteInteger(uint8_t low_digit, uint8_t high_digit, uint16_t data) {
	int i, j = 1;
	for (i = low_digit; i <= high_digit; i++) {
		SevenSeg_Transmit(i + 1, SevenSeg_Decimal_to_BCD(data / j));
		j *= 10;
	}
}

void SevenSeg_Transmit(uint8_t address, uint8_t data) {
	P2->OUT &= ~0x20;	// CS LOW

	while(!(EUSCI_A1->IFG & 0x02));
	EUSCI_A1->TXBUF = address;

	while(EUSCI_A1->STATW & 0x01);
	EUSCI_A1->TXBUF = data;

	while(EUSCI_A1->STATW & 0x01);
	P2->OUT |= 0x20;	// CS HIGH
}

void SevenSeg_SPI_P2_Init(void) {
	/* UCA1 to SPI */
    EUSCI_A1->CTLW0 = 0x0001;	// Disable during config
	EUSCI_A1->CTLW0 = 0xA981;	// MSB, 8-bit, master, 3-pin, synch, SMCLK
	EUSCI_A1->BRW = 100;		// 12MHz / 10 = 1.2 MHz clock
	EUSCI_A1->CTLW0 &= ~0x0001;	// Enable

	/* Unlock PMAP */
    PMAP->KEYID = 0x2D52;

	/* DIN and CLK pins */
    P2MAP->PMAP_REGISTER[1] = 0x0800;	// Map P2.3 to PM_UCA1CLK
    P2MAP->PMAP_REGISTER[2] = 0x070A;	// Map P2.4 to PM_UCA1SIMO
	P2->SEL0 |= 0x18;
	P2->SEL1 &= ~0x18;			// P2.3 - 2.4 pin function to UCB3

    /* CS pin */
	P2->SEL0 &= ~0x20;
	P2->SEL1 &= ~0x20;			// P2.5 to GPIO
    P2->DIR |= 0x20;			// P2.5 to Output
    P2->OUT |= 0x20;			// P2.5 to Output HIGH

    /* Lock PMAP */
    PMAP->CTL = 0;
    PMAP->KEYID = 0;
}

void SevenSeg_InitDriver(void) {
	uint8_t sevenSeg_config[] = {
		0x09, 0xFF,	// Decode Mode: Code B for all digits
		0x0A, 0x07,	// Intensity: 50%
		0x0B, 0x07,	// Scan Limit: Display all digits
		0x0C, 0x01,	// Shutdown: Disable shutdown
		0x0F, 0x00,	// Test: Disable test mode

		// Display all 0's
		0x01, 0x00,
		0x02, 0x00,
		0x03, 0x00,
		0x04, 0x00,
		0x05, 0x00,
		0x06, 0x00,
		0x07, 0x00,
		0x08, 0x00
	};

	for (i = 0; i < 25; i++) {
		SevenSeg_Transmit(sevenSeg_config[i], sevenSeg_config[++i]);
	}
}

/**
 * @param d A Decimal number
 * @return Corresponding binary-coded decimal
 */
unsigned char SevenSeg_Decimal_to_BCD(unsigned char d) {
	return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
}
