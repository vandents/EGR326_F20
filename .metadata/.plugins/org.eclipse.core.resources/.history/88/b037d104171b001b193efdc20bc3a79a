#include <stdio.h>
#include <stdlib.h>
#include "msp.h"
#include "Clock_48MHz.h"
#include "SysTick.h"


void Init(void);
void SevenSeg_SPI_P2_Init(void);
void SevenSeg_Transmit(uint8_t address, uint8_t data);
void Button_P6_Init(void);
unsigned char SevenSeg_Decimal_to_BCD(unsigned char d);
void SevenSeg_WriteInteger(uint8_t low_bit, uint8_t high_bit, uint16_t data);


volatile uint8_t Button_Pressed = 0;
volatile uint16_t Button_Count = 0;
volatile uint16_t Second_Count = 0;


/**
 * main.c
 */
void main(void) {
	WDT_A->CTL = 0x5A80;	// Stop watchdog timer

	int i = 0;

	Init();

	uint8_t sevenSeg_config[] = {
		0x09, 0xFF,	// Decode Mode: Code B for all digits
		0x0A, 0x07,	// Intensity: 50%
		0x0B, 0x07,	// Scan Limit: Display all digits
		0x0C, 0x01,	// Shutdown: Disable shutdown
		0x0F, 0x00,	// Test: Disable test mode

		// Display all 0's
		0x01, 0x00,
		0x02, 0x00,
		0x03, 0x00,
		0x04, 0x00,
		0x05, 0x00,
		0x06, 0x00,
		0x07, 0x00,
		0x08, 0x00
	};

	for (i = 0; i < 25; i++) {
		SevenSeg_Transmit(sevenSeg_config[i], sevenSeg_config[++i]);
	}

	while(1) {
    	if (Button_Pressed) {
    		if (TIMER32_1->CONTROL & 0x20) Second_Count = 0;
    		TIMER32_1->CONTROL ^= 0x20;
    		Button_Count++;
    		Button_Pressed = 0;
    		SevenSeg_WriteInteger(0, 3, Second_Count);
    		SevenSeg_WriteInteger(4, 7, Button_Count);
    	}
	}
}


void SevenSeg_WriteInteger(uint8_t low_bit, uint8_t high_bit, uint16_t data) {
	int i, j = 1;
	printf("\nData: %d\n", data);
	for (i = low_bit; i <= high_bit; i++) {
		uint8_t bcd = SevenSeg_Decimal_to_BCD(data / j);
		printf("Digit %i: %d\n", i, bcd);
		SevenSeg_Transmit(i + 1, SevenSeg_Decimal_to_BCD(data / j));
		j *= 10;
	}
}

void SevenSeg_Transmit(uint8_t address, uint8_t data) {
	P2->OUT &= ~0x20;	// CS LOW

	while(!(EUSCI_A1->IFG & 0x02));
	EUSCI_A1->TXBUF = address;

	while(EUSCI_A1->STATW & 0x01);
	EUSCI_A1->TXBUF = data;

	while(EUSCI_A1->STATW & 0x01);
	P2->OUT |= 0x20;	// CS HIGH
}

/** Initializations */
void Init(void) {
    // Terminate all IO pins
    P1->DIR |= 0xFF; P1->OUT = 0;
    P2->DIR |= 0xFF; P2->OUT = 0;
    P3->DIR |= 0xFF; P3->OUT = 0;
    P4->DIR |= 0xFF; P4->OUT = 0;
    P5->DIR |= 0xFF; P5->OUT = 0;
    P6->DIR |= 0xFF; P6->OUT = 0;
    P7->DIR |= 0xFF; P7->OUT = 0;
    P8->DIR |= 0xFF; P8->OUT = 0;
    P9->DIR |= 0xFF; P9->OUT = 0;
    P10->DIR |= 0xFF; P10->OUT = 0;

	Clock_Init48MHz();
	SysTick_Init();
	SevenSeg_SPI_P2_Init();
	Button_P6_Init();
	__enable_irq();			// Enable interrupts
}

/**
 * Configure T32.1 for 1 Hz interrupt
 */
void Timer32_1_Init(void) {
	TIMER32_1->CONTROL = 0x000000E8;	// Periodic, interrupts, /256, 16-bit
	TIMER32_1->LOAD = 46875;			// (12MHz / 256) / 46875 = 1 Hz
	TIMER32_1->INTCLR = 0x0;			// Reset interrupt flag
	NVIC_EnableIRQ(T32_INT1_IRQn);      // Enable interrupts on NVIC
}

/**
 * Timer32.1 ISR
 */
void T32_INT1_IRQHandler(void) {
	TIMER32_1->INTCLR = 0x0;	// Reset interrupt flag
	Second_Count++;
	SevenSeg_WriteInteger(0, 3, Second_Count);
}

/**
 * Button interrupt
 */
void PORT6_IRQHandler(void) {
	if (P6->IFG & BIT6) {
		Button_Pressed = 1;
		P6->IFG &= 0;
	}
}

/**
 * Port 6 pin initializations (button)
 */
void Button_P6_Init(void) {
	P6->SEL0 &= ~BIT6;
	P6->SEL1 &= ~BIT6;	// P6.6 to GPIO
	P6->DIR &= ~BIT6;	// P6.6 to input
    P6->REN |= BIT6;	// Enable pull-up resistors
    P6->OUT |= BIT6;	// Pull-up selected
    P6->IES |= BIT6;	// Trigger on high to low
    P6->IE |= BIT6;		// Enable interrupt for P6.6
    P6->IFG = 0;		// Reset interrupt flag
    NVIC_EnableIRQ(PORT6_IRQn);	// Enable interrupts on NVIC
}

void SevenSeg_SPI_P2_Init(void) {
	/* UCA1 to SPI */
    EUSCI_A1->CTLW0 = 0x0001;	// Disable during config
	EUSCI_A1->CTLW0 = 0xA981;	// MSB, 8-bit, master, 3-pin, synch, SMCLK
	EUSCI_A1->BRW = 0x0177;		// 12MHz / 375 = 32kHz clock
	EUSCI_A1->CTLW0 &= ~0x0001;	// Enable

	/* Unlock PMAP */
    PMAP->KEYID = 0x2D52;

	/* DIN and CLK pins */
    P2MAP->PMAP_REGISTER[1] = 0x0800;	// Map P2.3 to PM_UCA1CLK
    P2MAP->PMAP_REGISTER[2] = 0x070A;	// Map P2.4 to PM_UCA1SIMO
	P2->SEL0 |= 0x18;
	P2->SEL1 &= ~0x18;			// P2.3 - 2.4 pin function to UCB3

    /* CS pin */
	P2->SEL0 &= ~0x20;
	P2->SEL1 &= ~0x20;			// P2.5 to GPIO
    P2->DIR |= 0x20;			// P2.5 to Output
    P2->OUT |= 0x20;			// P2.5 to Output HIGH

    /* Lock PMAP */
    PMAP->CTL = 0;
    PMAP->KEYID = 0;
}

/**
 * @param d A Decimal number
 * @return Corresponding binary-coded decimal
 */
unsigned char SevenSeg_Decimal_to_BCD(unsigned char d) {
	return (((d / 10) << 4) & 0xF0) | ((d % 10) & 0x0F);
}
