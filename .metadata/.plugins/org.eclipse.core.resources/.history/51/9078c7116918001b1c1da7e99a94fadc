#include <stdio.h>
#include "msp.h"

#define LED2_RED BIT0
#define LED2_GREEN BIT1
#define LED2_BLUE BIT2

#define SLAVE_ADDRESS 0x48

char RXData;

void main(void) {

    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;

    P2->DIR = LED2_RED|LED2_GREEN|LED2_BLUE;
    P2->OUT = 0x00;
    P1->SEL0 |= BIT6 | BIT7;			 	// P1.6 and P1.7 as UCB0SDA and UCB0SCL

    EUSCI_B0->CTLW0 |= EUSCI_B_CTLW0_SWRST;		 // Hold EUSCI_B0 module in reset state
    EUSCI_B0->CTLW0 |= EUSCI_B_CTLW0_MODE_3|EUSCI_B_CTLW0_SYNC;
    EUSCI_B0->I2COA0 = SLAVE_ADDRESS | EUSCI_B_I2COA0_OAEN;
    EUSCI_B0->CTLW0 &= ~EUSCI_B_CTLW0_SWRST; 		// Clear SWRST to resume operation
    EUSCI_B0->IFG &= ~EUSCI_B_IFG_RXIFG0; 		// Clear EUSCI_B0 RX interrupt flag
    EUSCI_B0->IE |= EUSCI_B_IE_RXIE0;			 // Enable EUSCI_B0 RX interrupt

    NVIC->ISER[0] = 0x00100000; 				// EUSCI_B0 interrupt is enabled in NVIC
    __enable_irq();					 // All interrupts are enabled

    SCB->SCR |= SCB_SCR_SLEEPONEXIT_Msk;		 // Sleep on exit
    __sleep(); 					// enter LPM0
    printf("(slave) End of init\n");
}

void EUSCIB0_IRQHandler(void) {
    printf("(slave) Received something\n");

    uint32_t status = EUSCI_B0->IFG;		 // Get EUSCI_B0 interrupt flag
    EUSCI_B0->IFG  &=~ EUSCI_B_IFG_RXIFG0; 		// Clear EUSCI_B0 RX interrupt flag

    if(status & EUSCI_B_IFG_RXIFG0){			 // Check if receive interrupt occurs
           RXData = EUSCI_B0->RXBUF; 	     // Load current RXData value to transmit buffer

           if (RXData == 'R') P2->OUT ^= LED2_RED; 		// Toggle P2.0 if 'R' is received
           else if(RXData == 'G') P2->OUT ^= LED2_GREEN; 	// Toggle P2.1 if 'G' is received
           else if(RXData == 'B') P2->OUT ^= LED2_BLUE;	// Toggle P2.2 if 'B' is received
    }
}
